#include <hge.h>
#include <math.h>
#include <hgevector.h>
#include <hgesprite.h>
#include <hgefont.h>
#include <hgegui.h>
#include <hgeguictrls.h>
#include "Header.h"
#include "Bot.h"
#include "Player.h"
HEFFECT snd;
HEFFECT back;
HTEXTURE g_tBackground = 0;
hgeSprite* g_sBackground = NULL;
hgeSprite* g_mBackground = NULL;
HGE* hge = 0;
hgeSprite*          spr;
hgeSprite*          spt;
hgeFont             *fnt;
HTEXTURE            tex;
hgeSprite			*cursor;
hgeGUI				*gui;
hgeGUIButton* new_game = 0;
hgeGUIButton* quit = 0;

hgeGUIButton* PvP = 0;
hgeGUIButton* PwP = 0;
HTEXTURE tnew_game = 0;
HTEXTURE tquit = 0;
HTEXTURE tPvP = 0;

HTEXTURE cur = 0;


Box1* player1;
Box1* player2;
Box1* player_bot;

hgeQuad quad; //текстура шарика
hgeRect rector; //для столкновения 

// начальные константы шарика
float x=5.0f, y=300.0f;
float dx=8.0f, dy=-5.0f;
const float friction=1.0f;

//
int pl1_points = 0;
int pl2_points = 0;
int plb_points = 0;



//Gm Ovr
bool GameOver(short p1, short p2);
//Menu
bool checker_menu = true;
bool MenuUpgrade(float time);
void main_help();
bool helper = false;
bool clicked_pvp = false;
bool clicked_pls = false;
bool pause = false;


bool FrameFunc()
{
	float dt=hge->Timer_GetDelta();
	snd = hge->Effect_PlayEx(back,20,0,1.0,true);
	 
	//if(PvP->GetState){
	//	clicked_pvp=true;}
	    

		if(checker_menu){
		gui->Update(dt);
		if(MenuUpgrade(dt)) return true;	
	}
		else{
			if(hge->Input_GetKeyState(HGEK_SPACE)){
				pause=1;
			}
			
			if(hge->Input_GetKeyState(HGEK_C)){
				pause=0;
			}
			if(!pause){
	player1->Move(&rector,hge);
	//задаем нраницы 

	player1->update(dt);

	if(player1->getx()<40) 
		player1->setx(40);
	if(player1->gety()<85)
	    player1->sety(85);
	if(player1->getx()>400) 
		player1->setx(400);
	if(player1->gety()>555)
	    player1->sety(555);

		player2->update(dt);
	
		player2->Move(&rector,hge);
	if(player2->getx()>885) 
		player2->setx(885);

	if(player2->gety()<100)
	    player2->sety(100);

	if(player2->getx()<500) 
		player2->setx(500);

	if(player2->gety()>565)
	    player2->sety(565);

			player_bot->update(dt);
	
		player_bot->Move(&rector,hge);
	if(player_bot->getx()>885) 
		player_bot->setx(885);

	if(player_bot->gety()<100)
	    player_bot->sety(100);

	if(player_bot->getx()<500) 
		player_bot->setx(500);

	if(player_bot->gety()>565)
	    player_bot->sety(565);

	dx*=friction; 
	dy*=friction; 
	x+=dx; 
	y+=dy;

	if(x>885){
		x=450;
		y=300;
		dx=-dx;
		pl1_points++;
	}
	if(x<16){
		x=450;
		y=300;
		dx=-dx;
		pl2_points++;
	}
	if(y>585){
		y=585-(y-585);
		dy=-dy;
	}
	if(y<16){
		y=16+16-y;
		dy=-dy;
	}

	spr->GetBoundingBox(x,y,&rector);
	player1->update(dt);
	player2->update(dt);
	player_bot->update(dt);

	
	if(player1->Get_box().Intersect(&rector)){
	 //float miss= dx;
		if(2 < hge->Timer_GetTime() - player1->lastTimeTouchBallonToPlatform)
			dx=-dx;
		player1->lastTimeTouchBallonToPlatform=hge->Timer_GetTime();

	}
	if(player2->Get_box().Intersect(&rector)){
	//float miss= dx;
		if(2 < hge->Timer_GetTime() - player2->lastTimeTouchBallonToPlatform)
			dx=-dx;
		player2->lastTimeTouchBallonToPlatform=hge->Timer_GetTime();
	
	}

		if(player_bot->Get_box().Intersect(&rector)){
	 //float miss= dx;
		if(2 < hge->Timer_GetTime() - player_bot->lastTimeTouchBallonToPlatform)
			dx=-dx;
		player_bot->lastTimeTouchBallonToPlatform=hge->Timer_GetTime();

	}
			}
		}
	if (hge->Input_GetKeyState(HGEK_ESCAPE)) return true;
	return false;
		}

bool RenderFunc()
{
	hge->Gfx_BeginScene();
	hge->Gfx_Clear(0);

	g_sBackground->Render(0,0);
	
	if(checker_menu){
	gui->Render();
	main_help();
	}
	else{
	
	if(clicked_pvp){
			fnt->SetColor(ARGB(255,255,65,55));
	if(pl1_points < 3 && pl2_points < 3){
		fnt->printf(450,20,HGETEXT_CENTER,"%i : %i",pl1_points,pl2_points);
	}
	else{
		if(pl1_points>pl2_points){
			fnt->printf(450,20,HGETEXT_CENTER,"1 player win!");
			main_help();
			checker_menu = true;
	}
		else
			fnt->printf(450,20,HGETEXT_CENTER,"2 player win!");
		    main_help();
			checker_menu = true;
			
	}
	fnt->SetColor(ARGB(255,255,13,5));
	//fnt->printf(10, 10, HGETEXT_LEFT, "to restart press R");
	if (hge->Input_GetKeyState(HGEK_R)){
		pl1_points = pl2_points = 0;
	}

	spr->Render(x, y);
	player1->Render_view();
	player2->Render_view();
	}
	else if(clicked_pls){

	fnt->SetColor(ARGB(255,255,65,55));
	if(pl1_points < 3 && plb_points < 3){
		fnt->printf(450,20,HGETEXT_CENTER,"%i : %i",pl1_points,plb_points);
	}
	else{
		if(pl1_points>plb_points){
			fnt->printf(450,20,HGETEXT_CENTER,"1 player win!");
			main_help();
			checker_menu = true;
	}
		else
			fnt->printf(450,20,HGETEXT_CENTER,"2 player win!");
				main_help();
			checker_menu = true;
			
	}
	fnt->SetColor(ARGB(255,255,13,5));
	//fnt->printf(10, 10, HGETEXT_LEFT, "to restart press R");
	if (hge->Input_GetKeyState(HGEK_R)){
		pl1_points = plb_points = 0;
	}

	spr->Render(x, y);
	player1->Render_view();
	player_bot->Render_view();
	}
	}
	hge->Gfx_EndScene();  
	
	return false;
}

int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int){
	
	hge = hgeCreate(HGE_VERSION);
	hge->System_SetState(HGE_LOGFILE, "hge.log");
	hge->System_SetState(HGE_FRAMEFUNC, FrameFunc);
	hge->System_SetState(HGE_RENDERFUNC, RenderFunc);
	hge->System_SetState(HGE_TITLE, "THE GAME");

	// Установим видеорежим. 
	hge->System_SetState(HGE_FPS, 40);
	hge->System_SetState(HGE_WINDOWED, true);
	hge->System_SetState(HGE_SCREENWIDTH, 900);
	hge->System_SetState(HGE_SCREENHEIGHT, 600);
	hge->System_SetState(HGE_SCREENBPP, 32);

	if(hge->System_Initiate())
	{
		tnew_game = hge->Texture_Load("PvB.png");
		tPvP = hge->Texture_Load("PvP.png");
		tquit = hge->Texture_Load("quit.png");
		cur = hge->Texture_Load("cursor.png");
		cursor=new hgeSprite(cur,0,0,32,32);

		new_game = new hgeGUIButton(1,350,250,214,40,tnew_game,0,0);
		PvP = new hgeGUIButton(2,345,305,225,40,tPvP,0,0);
		quit = new hgeGUIButton(3,380,360,163,40,tquit,0,0);
 
	    back = hge->Effect_Load("Hideyuki Fukasawa - Credits.mp3");
		g_tBackground = hge->Texture_Load("back1.jpg");
	    g_sBackground = new hgeSprite(g_tBackground, 0, 0, 900, 600);
		
	    fnt=new hgeFont("font1.fnt");
		spr=new hgeSprite(tex,0, 0, 32, 32);
		spr->SetHotSpot(16,16);

		gui=new hgeGUI();

		gui->AddCtrl(new_game);
		gui->AddCtrl(PvP);
		gui->AddCtrl(quit);

		gui->SetNavMode(HGEGUI_UPDOWN | HGEGUI_CYCLED);
		gui->SetCursor(cursor);
		gui->SetFocus(1);
		gui->Enter();


		spt=new hgeSprite(tex, 0, 0, 32, 32);
		spt->SetBlendMode(BLEND_COLORMUL | BLEND_ALPHAADD | BLEND_NOZWRITE);
		spt->SetHotSpot(16,16);

		player1=new Player(50,50,0,0,Keys(HGEK_W,HGEK_A,HGEK_D,HGEK_S));
		player2=new Player(800,500,0,0,Keys(HGEK_UP,HGEK_LEFT,HGEK_RIGHT,HGEK_DOWN));
		player_bot=new Bot(800,500,0,0);
		
		
		hge->System_Start();

		/*delete par;*/
		hge->Texture_Free(tnew_game);
		hge->Texture_Free(tPvP);
		hge->Texture_Free(tquit);
		delete gui;
		delete fnt;
		delete spt;
		delete spr;
		//delete snd;
		hge->Texture_Free(quad.tex);
	}

	else MessageBoxA(NULL, hge->System_GetErrorMessage(), "Error", MB_OK | MB_ICONERROR | MB_SYSTEMMODAL);

	hge->System_Shutdown();
	hge->Release();
	return 0;
}


void main_help(){
	fnt->SetColor(ARGB(255,255,0,0));
{
		if(pl1_points>pl2_points){
			fnt->printf(450,20,HGETEXT_CENTER,"1 player win!");
	}
		else
		fnt->printf(450,20,HGETEXT_CENTER,"2 player win!");
	/*	gui->Render();
	    main_help();*/
	}

//if(pl1_points>plb_points){
//	if(pl1_points>plb_points){
//			fnt->printf(450,20,HGETEXT_CENTER,"1 player win!");
//	}
//
//else
//		fnt->printf(450,20,HGETEXT_CENTER,"2 player win!");
//	/*	gui->Render();
//	    main_help();*/
//	}
	fnt->printf(10, 10, HGETEXT_LEFT, "to restart press R");
	fnt->printf(450,490,HGETEXT_CENTER,"1 player w(up), s(down), a(left), d(right)");
	fnt->printf(450,550,HGETEXT_CENTER,"2 player i(up), k(down), j(left), l(right)");
}

bool MenuUpgrade(float time){
	gui->Update(time);
	// if New Game pressed & others
	if(new_game->GetState() || hge->Input_GetKeyState(HGEK_ENTER)){
		checker_menu = false;
		clicked_pls = true;
	}
	if(PvP->GetState()){
		checker_menu = false;
		clicked_pvp = true;
	}
	if(quit->GetState()) return true;
	if(hge->Input_GetKeyState(HGEK_ESCAPE)) return true;
	return false;
};
